# Name: Nicolas Urrea
# Date: October 31, 2024
# Assignment: Assignment 4
# Due Date: October 30, 2024, 11:59 PM
# About this project: This program creates a tic-tact-toe game. The client file connects to the server, sends moves, receives game updates, and displays the board until the game ends.
# Assumptions: Pretty much assumes players take turns in order, the server waits for new connections after each game, moves follow the [ABC][123] format, and the network is stable.
# All work below was performed solely by Nicolas Urrea.
# I used code generated by an AI tool.

import socket
import sys

def print_board(board):
    print("  1 2 3")
    print("A " + " ".join(board[0]))
    print("B " + " ".join(board[1]))
    print("C " + " ".join(board[2]))

def client_program(hostname, port):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((hostname, port))
    print(f"Connected to server at {hostname}:{port}")

    board = [['.' for _ in range(3)] for _ in range(3)]
    print_board(board)
    
    client_symbol = '#'
    server_symbol = 'O'
    game_over = False

    while not game_over:
        while True:
            try:
                move = input("Enter your move ([ABC][123]): ").upper()
                row, col = ord(move[0]) - 65, int(move[1]) - 1
                if board[row][col] == '.':
                    board[row][col] = client_symbol
                    client_socket.send(move.encode())
                    print_board(board)
                    break
                else:
                    print("Invalid move, position already taken.")
            except (IndexError, ValueError):
                print("Invalid input format. Use format [ABC][123].")

        server_response = client_socket.recv(1024).decode()
        if server_response == "win":
            print("Congratulations, you won!")
            game_over = True
        elif server_response == "lose":
            print("You lost the game.")
            game_over = True
        elif server_response == "tie":
            print("The game is a tie!")
            game_over = True
        elif server_response == "invalid":
            print("Invalid move, position already taken.")
        elif server_response == "continue":
            print("Waiting for opponent's move...")
            move = client_socket.recv(1024).decode()
            if move:
                row, col = ord(move[0]) - 65, int(move[1]) - 1
                board[row][col] = server_symbol
                print_board(board)
            else:
                print("Connection lost.")
                break

    client_socket.close()

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python lastname_firstinitial_tictactoeclient.py <hostname> <port>")
        sys.exit(1)
    hostname = sys.argv[1]
    port = int(sys.argv[2])
    client_program(hostname, port)
